daemon off;

error_log /s/logs/cc_nginx_error.log;
pid       /var/stackato/sys/run/cc_nginx/cc_nginx.pid;

worker_processes 2;

events {
  worker_connections 512;
  use epoll;
}


http {
  include       /etc/nginx/mime.types;
  default_type  text/html;
  server_tokens off;

  server_names_hash_max_size 2048;
  server_names_hash_bucket_size 128;
  types_hash_max_size 2048;
  types_hash_bucket_size 128;

  log_format main  '$host - [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   '$proxy_add_x_forwarded_for response_time:$upstream_response_time';

  access_log  /s/logs/cc_nginx_access.log  main;

  sendfile             on;  #enable use of sendfile()
  tcp_nopush           on;
  tcp_nodelay          on;  #disable nagel's algorithm

  keepalive_timeout  75 20; #inherited from router

  client_max_body_size 512M; #already enforced upstream/but doesn't hurt.

  chunkin on;
  error_page 411 = @my_411_error;

  upstream cloud_controller {
    server unix:/var/stackato/sys/run/cloud_controller_ng/cloud_controller.sock;
  }

  server {
    listen    8181;
    server_name  _;
    server_name_in_redirect off;

    location @my_411_error {
      chunkin_resume;
    }

    # proxy and log all CC traffic
    location / {
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_send_timeout          1200;
      proxy_read_timeout          1200;
      proxy_pass                 http://cloud_controller;
    }

    # used for x-accel-redirect uri://location/foo.txt
    # nginx will serve the file root || location || foo.txt
    location /droplets/ {
      internal;
      root   /var/stackato/shared;
    }

    location ~ ^/(cc-packages|cc-droplets)/.* {
      internal;
      root /home/stackato/stackato/data/;
    }

    location ~ (/apps/.*/application|/v2/apps/.*/bits|/services/v\d+/configurations/.*/serialized/data|/v2/custom_buildpacks/.*/bits) {
      # Pass altered request body to this location
      upload_pass   @cc_uploads;
      # Redirect the 405 error that appears on PUT requests
      error_page 405 =  @cc_uploads;
      upload_pass_args on;

      # Store files to this directory
      upload_store /var/stackato/data/cloud_controller_ng/tmp/uploads;

      # No limit for output body forwarded to CC
      upload_max_output_body_len 0;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "${upload_field_name}_name" $upload_file_name;
      upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;

      #forward the following fields from existing body
      upload_pass_form_field "^resources$";
      upload_pass_form_field "^_method$";

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Droplet uploads from the stager should be authenticated
    location ~ /staging/(buildpack_cache|droplets)/.*/upload {
      # Download the droplets and buildpacks
      if ($request_method = GET){
        proxy_pass                 http://cloud_controller;
      }
      # Pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Pass altered request body to this location
      upload_pass   @cc_uploads;

      # Store files to this directory
      upload_store /var/stackato/data/cloud_controller_ng/tmp/staged_droplet_uploads;

      # Allow uploaded files to be read only by user
      upload_store_access user:r;

      # Set specified fields in request body
      upload_set_form_field "droplet_path" $upload_tmp_path;

      #on any error, delete uploaded files.
      upload_cleanup 400-505;
    }

    # Pass altered request body to a backend
    location @cc_uploads {
      proxy_pass http://unix:/var/stackato/sys/run/cloud_controller_ng/cloud_controller.sock;
    }

    location ~ ^/internal_redirect/(.*){
      # only allow internal redirects
      internal;

      set $download_url $1;

      #have to manualy pass along auth header
      set $auth_header $upstream_http_x_auth;
      proxy_set_header Authorization $auth_header;

      # Download the file and send it to client
      proxy_pass $download_url;
    }
  }
}
